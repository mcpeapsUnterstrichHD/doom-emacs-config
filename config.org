#+title: mcpeaps_HD's Doom Emacs Config
#+author: mcpeapsUnterstrichHD
#+description: my personal Doom Emacs Config
#+startup: showeverything
#+options: toc:2

* Table of Content :toc:
- [[#doom-settings][Doom Settings]]
  - [[#author][Author]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
  - [[#shortcuts][Shortcuts]]
  - [[#blinking-cursor][Blinking Cursor]]
- [[#org-mode-settings][Org mode Settings]]
  - [[#org-directory][Org Directory]]
  - [[#modern-table][Modern Table]]
  - [[#highlighting][Highlighting]]
- [[#other][Other]]
- [[#pdf][PDF]]
  - [[#disable-line-numbers][Disable Line Numbers]]
- [[#github-copilot][Github Copilot]]
  - [[#setup][Setup]]
  - [[#on-request][On Request]]
  - [[#on-notification][On Notification]]

* Doom Settings

** Author

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp

(setq user-full-name "mcpeapsUnterstrichHD"
      user-mail-address "mcpeaps_HD@outlook.com")

#+end_src

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

*** General

#+begin_src emacs-lisp

(setq doom-font (font-spec :family "CaskaydiaCove Nerd Font Mono" :size 18)
      doom-big-font (font-spec :family "CaskaydiaCove Nerd Font Mono" :size 24)
      doom-symbol-font (font-spec :family "Symbols Nerd Font Mono" :size 18)
      doom-serif-font (font-spec :family "CaskaydiaCove Nerd Font" :size 18)
      doom-variable-pitch-font (font-spec :family "CaskaydiaCove Nerd Font Propo" :size 18))

#+end_src

*** Vterm

#+begin_src emacs-lisp

(add-hook 'vterm-mode-hook
  (lambda ()
    (buffer-face-set '(:family "CaskaydiaCove Nerd Font Mono" :size 18))))

#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

** Theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

*** Markdown

**** View

#+begin_src emacs-lisp

(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.2))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.1)))))

#+end_src

**** Toggle View mode

#+begin_src emacs-lisp

(defun mahd/toggle-markdown-view-mode ()
  "Toggle between `markdown-mode' and `markdown-view-mode'."
  (interactive)
  (if (eq major-mode 'markdown-view-mode)
      (markdown-mode)
    (markdown-view-mode)))

#+end_src

*** Org

#+begin_src emacs-lisp

(custom-theme-set-faces!
  'doom-nord
  '(org-level-8 :inherit outline-3 :height 1.0)
  '(org-level-7 :inherit outline-3 :height 1.0)
  '(org-level-6 :inherit outline-3 :height 1.1)
  '(org-level-5 :inherit outline-3 :height 1.2)
  '(org-level-4 :inherit outline-3 :height 1.3)
  '(org-level-3 :inherit outline-3 :height 1.4)
  '(org-level-2 :inherit outline-2 :height 1.5)
  '(org-level-1 :inherit outline-1 :height 1.6)
  '(org-document-title :height 1.8 :bold t :underline nil)
  )

#+end_src

*** General

#+begin_src emacs-lisp

(setq doom-theme 'doom-nord)

#+end_src

** Line Numbers

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp

(setq display-line-numbers-type 'relative)

#+end_src

** Shortcuts

*** Comment Lines

#+begin_src emacs-lisp

(map! :leader
      :desc "Line Comments" "-" #'comment-line)

#+end_src

*** Toggle

#+begin_src emacs-lisp

(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle markdown-view-mode"      "m" #'mahd/toggle-markdown-view-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines
       :desc "Toggle treemacs"                "T" #'+treemacs/toggle
       :desc "Toggle vterm split"             "v" #'+vterm/toggle))

(map! :leader
      (:prefix ("o" . "open here")
       :desc "Open vterm here"     "v" #'+vterm/here))


#+end_src

** Blinking Cursor

*** Enable

#+begin_src emacs-lisp

(after! doom-start
(blink-cursor-mode 1))

;; (after! evil
;;   (blink-cursor-mode 1))

;; (add-hook 'emacs-startup-hook
;;           (lambda () (run-with-idle-timer 0.5 nil (lambda () (blink-cursor-mode 1)))))

#+end_src

*** Timing

**** Delay

#+begin_src emacs-lisp

(after! doom-start
(setq blink-cursor-delay 0.5))

#+end_src

**** Interval

#+begin_src emacs-lisp

(after! doom-start
(setq blink-cursor-interval 0.5))

#+end_src

* Org mode Settings

** Org Directory

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp

(setq org-directory "~/org/")

#+end_src

** Modern Table

#+begin_src emacs-lisp

(setq org-modern-table-vertical 1)
(setq org-modern-table t)

#+end_src

** TODO Highlighting

#+begin_src emacs-lisp

(add-hook 'org-mode-hook #'hl-todo-mode)

#+end_src

* Other


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* PDF
** Disable Line Numbers

#+begin_src emacs-lisp

(add-hook 'pdf-view-mode-hook #'(lamda () (interactive) (display-line-numbers-mode -1)))

#+end_src

* Github Copilot

** Setup
*** Normal

#+begin_src emacs-lisp

;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :hook (org-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

#+end_src
*** Fallback

#+begin_src emacs-lisp

(after! (evil copilot)
  ;; Define the custom function that either accepts the completion or does the default behavior
  (defun my/copilot-tab-or-default ()
    (interactive)
    (if (and (bound-and-true-p copilot-mode)
             ;; Add any other conditions to check for active copilot suggestions if necessary
             )
        (copilot-accept-completion)
      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.

  ;; Bind the custom function to <tab> in Evil's insert state
  (evil-define-key 'insert 'global (kbd "<tab>") 'my/copilot-tab-or-default))

#+end_src

** On Request

Register a handler to be called when a request of type method is received. Return JSON serializable as result or calling jsonrpc-error for errors. [readmore](https://www.gnu.org/software/emacs/manual/html_node/elisp/JSONRPC-Overview.html)

Display desktop notification if emacs is built with d-bus

#+begin_src emacs-lisp

;; (copilot-on-request
;;  'window/showMessageRequest
;;  (lambda (msg) (notifications-notify :title "Emacs Copilot" :body (plist-get msg :message))))

#+end_src

** On Notification

#+begin_src emacs-lisp

;; (copilot-on-notification
;;   'window/logMessage
;;   (lambda (msg) (message (plist-get msg :message))

#+end_src
